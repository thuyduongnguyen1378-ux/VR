<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

    
  <!-- Spot Style - chùm ảnh thái -->
  <style name="Iconchùmảnhthái"
         url="./%FIRSTXML%/spots/_1_user_defaultpoint0.png"
         visible="false"
         onhover="onhoverIconchùmảnhthái"
         onout="onoutIconchùmảnhthái"


         />

  <action name="onhoverIconchùmảnhthái">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconchùmảnhthái">
    hideTooltip();



  </action>



    
  <!-- Spot Style - chùm ảnh ê đê -->
  <style name="Iconchùmảnhêđê"
         url="./%FIRSTXML%/spots/_3_user_defaultpoint1.png"
         visible="false"
         onhover="onhoverIconchùmảnhêđê"
         onout="onoutIconchùmảnhêđê"


         />

  <action name="onhoverIconchùmảnhêđê">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconchùmảnhêđê">
    hideTooltip();



  </action>



    
  <!-- Spot Style - video ê đê -->
  <style name="Iconvideoêđê"
         url="./%FIRSTXML%/spots/thi7871t_k7871_ch432a_co_ten__6__user_defaultpoint3.png"
         visible="false"
         onhover="onhoverIconvideoêđê"
         onout="onoutIconvideoêđê"


         />

  <action name="onhoverIconvideoêđê">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconvideoêđê">
    hideTooltip();



  </action>



    
  <!-- Spot Style - audio thái -->
  <style name="Iconaudiothái"
         url="./%FIRSTXML%/spots/thi7871t_k7871_ch432a_co_ten__7__user_defaultpoint4.png"
         visible="false"
         onhover="onhoverIconaudiothái"
         onout="onoutIconaudiothái"


         />

  <action name="onhoverIconaudiothái">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconaudiothái">
    hideTooltip();



  </action>



    
  <!-- Spot Style - audio ê đê -->
  <style name="Iconaudioêđê"
         url="./%FIRSTXML%/spots/_4_user_defaultpoint5.png"
         visible="false"
         onhover="onhoverIconaudioêđê"
         onout="onoutIconaudioêđê"


         />

  <action name="onhoverIconaudioêđê">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconaudioêđê">
    hideTooltip();



  </action>



    
  <!-- Spot Style - audio khmer -->
  <style name="Iconaudiokhmer"
         url="./%FIRSTXML%/spots/_5_user_defaultpoint6.png"
         visible="false"
         onhover="onhoverIconaudiokhmer"
         onout="onoutIconaudiokhmer"


         />

  <action name="onhoverIconaudiokhmer">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconaudiokhmer">
    hideTooltip();



  </action>



    
  <!-- Spot Style - nút thái -->
  <style name="Iconnútthái"
         url="./spots/_11_user_defaultpoint7.png"
         visible="false"
         onhover="onhoverIconnútthái"
         onout="onoutIconnútthái"


         />

  <action name="onhoverIconnútthái">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconnútthái">
    hideTooltip();



  </action>



    
  <!-- Spot Style - nút ê đê -->
  <style name="Iconnútêđê"
         url="./%FIRSTXML%/spots/_12_user_defaultpoint8.png"
         visible="false"
         onhover="onhoverIconnútêđê"
         onout="onoutIconnútêđê"


         />

  <action name="onhoverIconnútêđê">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconnútêđê">
    hideTooltip();



  </action>



    
  <!-- Spot Style - nút khmer -->
  <style name="Iconnútkhmer"
         url="./%FIRSTXML%/spots/_13_user_defaultpoint9.png"
         visible="false"
         onhover="onhoverIconnútkhmer"
         onout="onoutIconnútkhmer"


         />

  <action name="onhoverIconnútkhmer">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconnútkhmer">
    hideTooltip();



  </action>



    
  <!-- Spot Style - chùm ảnh khmer -->
  <style name="Iconchùmảnhkhmer"
         url="./%FIRSTXML%/spots/_2_user_defaultpoint10.png"
         visible="false"
         onhover="onhoverIconchùmảnhkhmer"
         onout="onoutIconchùmảnhkhmer"


         />

  <action name="onhoverIconchùmảnhkhmer">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconchùmảnhkhmer">
    hideTooltip();



  </action>



<!-- ********** -->
<!-- ảnh thái -->
<!-- id : gallery -->
<!-- ********** -->

<ptplugin name="gallery" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_width" value="100" type="int" />
		<option name="container_width_unit" value="percent" type="string" />
		<option name="container_height" value="100" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="item_border_alpha" value="1" type="float" />
		
		<option name="title_displayed" value="true" type="bool" />
		<option name="title_position" value="top" type="string" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="bold" type="string" />
		<option name="title_style" value="normal" type="string" />
		<option name="title_decoration" value="none" type="string" />
		<option name="title_color" value="666666" type="string" />
		
		<option name="caption_displayed" value="false" type="bool" />
		
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="bottomleft" type="string" />
		<option name="play_text" value="galleryplay_text" type="string" />




		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" />
		<option name="counter_color" value="666666" type="string" />
		<option name="navprev_text" value="gallerynavprev_text" type="string" />
		<option name="navnext_text" value="gallerynavnext_text" type="string" />




		<option name="navigation_arrows" value="true" type="bool" />


		<option name="leftarrow_image" value="./54panotourdata/graphics/gallery/_1.png" type="string" />


		<option name="rightarrow_image" value="./54panotourdata/graphics/gallery/_4.png" type="string" />


		<option name="fullscreen_displayed" value="true" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="galleryfullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="galleryclose_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_gallery')" type="string" />
		<option name="zorder" value="1" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		<item name="item_1" title="gallerypicture_title0" caption="gallerypicture_caption0" value="./54panotourdata/graphics/gallery/_1.png"/>
		<item name="item_2" title="gallerypicture_title1" caption="gallerypicture_caption1" value="./54panotourdata/graphics/gallery/_2.png"/>
		<item name="item_3" title="gallerypicture_title2" caption="gallerypicture_caption2" value="./54panotourdata/graphics/gallery/_3.png"/>
		<item name="item_4" title="gallerypicture_title3" caption="gallerypicture_caption3" value="./54panotourdata/graphics/gallery/_4.png"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_gallery">
	set(ptplugin[gallery].jsready, true);
</action>

<action name="showGallery_gallery">
	ifnot(ptplugin[gallery].isOpen,
		set(ptplugin[gallery].isOpen, true);
		set(ptplugin[gallery].doNotDeleteMe, false);
		set(gallery_boxurl, %1);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(gallery, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	,
		if(%1 !== null AND %1 != gallery_boxurl,
			closeKolorBox_gallery();
			delayedcall(0.3,showGallery_gallery(%1););
		);
	);
</action>

<action name="toggleGallery_gallery">
	js(invokePluginFunction(gallery, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_gallery">
	js(invokePluginFunction(gallery, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_gallery">
	resumeautorotation(forceplugin);

	set(ptplugin[gallery].isOpen, false);
</action>

<action name="changeLanguage_gallery">
	if(ptplugin[gallery].jsready,
		js(invokePluginFunction(gallery, changeLanguage));
	,
		delayedcall(delay_gallery, 0.1, changeLanguage_gallery(););
	);
</action>

<events name="kolorBoxEvents_gallery" 
	keep="true"
	changetourlanguage="changeLanguage_gallery();"
	/>

<!-- ********** -->
<!-- ảnh ede -->
<!-- id : gallery1 -->
<!-- ********** -->

<ptplugin name="gallery1" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_width" value="100" type="int" />
		<option name="container_width_unit" value="percent" type="string" />
		<option name="container_height" value="100" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="item_border_alpha" value="1" type="float" />
		
		<option name="title_displayed" value="true" type="bool" />
		<option name="title_position" value="top" type="string" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="bold" type="string" />
		<option name="title_style" value="normal" type="string" />
		<option name="title_decoration" value="none" type="string" />
		<option name="title_color" value="666666" type="string" />
		
		<option name="caption_displayed" value="false" type="bool" />
		
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="bottomleft" type="string" />
		<option name="play_text" value="gallery1play_text" type="string" />




		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" />
		<option name="counter_color" value="666666" type="string" />
		<option name="navprev_text" value="gallery1navprev_text" type="string" />
		<option name="navnext_text" value="gallery1navnext_text" type="string" />




		<option name="navigation_arrows" value="true" type="bool" />


		<option name="leftarrow_image" value="./54panotourdata/graphics/gallery1/a777nh_1.png" type="string" />


		<option name="rightarrow_image" value="./54panotourdata/graphics/gallery1/a777nh_5.png" type="string" />


		<option name="fullscreen_displayed" value="true" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="gallery1fullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="gallery1close_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_gallery1')" type="string" />
		<option name="zorder" value="2" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		<item name="item_1" title="gallery1picture_title0" caption="gallery1picture_caption0" value="./54panotourdata/graphics/gallery1/a777nh_1.png"/>
		<item name="item_2" title="gallery1picture_title1" caption="gallery1picture_caption1" value="./54panotourdata/graphics/gallery1/a777nh_2.png"/>
		<item name="item_3" title="gallery1picture_title2" caption="gallery1picture_caption2" value="./54panotourdata/graphics/gallery1/a777nh_3.png"/>
		<item name="item_4" title="gallery1picture_title3" caption="gallery1picture_caption3" value="./54panotourdata/graphics/gallery1/a777nh_4.png"/>
		<item name="item_5" title="gallery1picture_title4" caption="gallery1picture_caption4" value="./54panotourdata/graphics/gallery1/a777nh_5.png"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_gallery1">
	set(ptplugin[gallery1].jsready, true);
</action>

<action name="showGallery_gallery1">
	ifnot(ptplugin[gallery1].isOpen,
		set(ptplugin[gallery1].isOpen, true);
		set(ptplugin[gallery1].doNotDeleteMe, false);
		set(gallery1_boxurl, %1);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(gallery1, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	,
		if(%1 !== null AND %1 != gallery1_boxurl,
			closeKolorBox_gallery1();
			delayedcall(0.3,showGallery_gallery1(%1););
		);
	);
</action>

<action name="toggleGallery_gallery1">
	js(invokePluginFunction(gallery1, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_gallery1">
	js(invokePluginFunction(gallery1, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_gallery1">
	resumeautorotation(forceplugin);

	set(ptplugin[gallery1].isOpen, false);
</action>

<action name="changeLanguage_gallery1">
	if(ptplugin[gallery1].jsready,
		js(invokePluginFunction(gallery1, changeLanguage));
	,
		delayedcall(delay_gallery1, 0.1, changeLanguage_gallery1(););
	);
</action>

<events name="kolorBoxEvents_gallery1" 
	keep="true"
	changetourlanguage="changeLanguage_gallery1();"
	/>

<!-- ********** -->
<!-- ảnh khmer -->
<!-- id : gallery2 -->
<!-- ********** -->

<ptplugin name="gallery2" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_width" value="100" type="int" />
		<option name="container_width_unit" value="percent" type="string" />
		<option name="container_height" value="100" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="item_border_alpha" value="1" type="float" />
		
		<option name="title_displayed" value="true" type="bool" />
		<option name="title_position" value="top" type="string" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="bold" type="string" />
		<option name="title_style" value="normal" type="string" />
		<option name="title_decoration" value="none" type="string" />
		<option name="title_color" value="666666" type="string" />
		
		<option name="caption_displayed" value="false" type="bool" />
		
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="bottomleft" type="string" />
		<option name="play_text" value="gallery2play_text" type="string" />




		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" />
		<option name="counter_color" value="666666" type="string" />
		<option name="navprev_text" value="gallery2navprev_text" type="string" />
		<option name="navnext_text" value="gallery2navnext_text" type="string" />




		<option name="navigation_arrows" value="true" type="bool" />




		<option name="fullscreen_displayed" value="true" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="gallery2fullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="gallery2close_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_gallery2')" type="string" />
		<option name="zorder" value="3" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		<item name="item_1" title="gallery2picture_title0" caption="gallery2picture_caption0" value="./54panotourdata/graphics/gallery2/_1__1_.png"/>
		<item name="item_2" title="gallery2picture_title1" caption="gallery2picture_caption1" value="./54panotourdata/graphics/gallery2/_2__1_.png"/>
		<item name="item_3" title="gallery2picture_title2" caption="gallery2picture_caption2" value="./54panotourdata/graphics/gallery2/_3__1_.png"/>
		<item name="item_4" title="gallery2picture_title3" caption="gallery2picture_caption3" value="./54panotourdata/graphics/gallery2/_4__2_.png"/>
		<item name="item_5" title="gallery2picture_title4" caption="gallery2picture_caption4" value="./54panotourdata/graphics/gallery2/_5__1_.png"/>
		<item name="item_6" title="gallery2picture_title5" caption="gallery2picture_caption5" value="./54panotourdata/graphics/gallery2/_6__1_.png"/>
		<item name="item_7" title="gallery2picture_title6" caption="gallery2picture_caption6" value="./54panotourdata/graphics/gallery2/_7.png"/>
		<item name="item_8" title="gallery2picture_title7" caption="gallery2picture_caption7" value="./54panotourdata/graphics/gallery2/_8.png"/>
		<item name="item_9" title="gallery2picture_title8" caption="gallery2picture_caption8" value="./54panotourdata/graphics/gallery2/_9.png"/>
		<item name="item_10" title="gallery2picture_title9" caption="gallery2picture_caption9" value="./54panotourdata/graphics/gallery2/_10.png"/>
		<item name="item_11" title="gallery2picture_title10" caption="gallery2picture_caption10" value="./54panotourdata/graphics/gallery2/_11.png"/>
		<item name="item_12" title="gallery2picture_title11" caption="gallery2picture_caption11" value="./54panotourdata/graphics/gallery2/_12.png"/>
		<item name="item_13" title="gallery2picture_title12" caption="gallery2picture_caption12" value="./54panotourdata/graphics/gallery2/_13.png"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_gallery2">
	set(ptplugin[gallery2].jsready, true);
</action>

<action name="showGallery_gallery2">
	ifnot(ptplugin[gallery2].isOpen,
		set(ptplugin[gallery2].isOpen, true);
		set(ptplugin[gallery2].doNotDeleteMe, false);
		set(gallery2_boxurl, %1);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(gallery2, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	,
		if(%1 !== null AND %1 != gallery2_boxurl,
			closeKolorBox_gallery2();
			delayedcall(0.3,showGallery_gallery2(%1););
		);
	);
</action>

<action name="toggleGallery_gallery2">
	js(invokePluginFunction(gallery2, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_gallery2">
	js(invokePluginFunction(gallery2, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_gallery2">
	resumeautorotation(forceplugin);

	set(ptplugin[gallery2].isOpen, false);
</action>

<action name="changeLanguage_gallery2">
	if(ptplugin[gallery2].jsready,
		js(invokePluginFunction(gallery2, changeLanguage));
	,
		delayedcall(delay_gallery2, 0.1, changeLanguage_gallery2(););
	);
</action>

<events name="kolorBoxEvents_gallery2" 
	keep="true"
	changetourlanguage="changeLanguage_gallery2();"
	/>

<!-- ********** -->
<!-- THANH BAR -->
<!-- id : controlBar_dockedThumbnails -->
<!-- ********** -->

<krpano controlBar_dockedThumbnailsbarbuilt="false" controlBar_dockedThumbnailsIsOpened="false" controlBar_dockedThumbnailsThumbnailsPos="0" />

<events name="controlBar_dockedThumbnailsbarevents" 
	onxmlcomplete="controlBar_dockedThumbnailsbuildMenuBar();"


	onresize="controlBar_dockedThumbnailsOnResize();"
	keep="true"/>



<action name="controlBar_dockedThumbnailsbuildMenuBar">
	ifnot (controlBar_dockedThumbnailsbarbuilt, controlBar_dockedThumbnailsbuildMenu(); set(controlBar_dockedThumbnailsbarbuilt, true););
</action>


<!-- ********** -->
<!-- Thumbnails Bar part of -->
<!-- THANH BAR -->
<!-- id : controlBar_dockedThumbnails -->
<!-- ********** -->






<layer name="thumbnailsBar_controlBar_dockedThumbnails" 
	keep="true" 
	type="container" 
	visible="false"
	parent="controlBar_dockedThumbnails_bg" 
	align="bottomleft"
	
	width="100%"
	height="50" 
	
	x="0"
	y="0"
	zorder="1"
/>


<layer name="thumbnailBorderSource_controlBar_dockedThumbnails"
	keep="true"
	visible="false"
	onloaded="loadedImages_controlBar_dockedThumbnails(border);"
	url="%FIRSTXML%/graphics/dockedthumbscontrolbar/thumbnails_states.png" 
	offsetX="5"
	offsetY="5"
	quarterHeight="0"
/>


	
	<style name="scrollButtonsBgStyle_controlBar_dockedThumbnails"
		keep="true"
		parent="thumbnailsBar_controlBar_dockedThumbnails"
		alpha="0.3"
		zorder="1"
	/>
	<layer name="scrollPrevArrowBg_controlBar_dockedThumbnails" 
		style="scrollButtonsBgStyle_controlBar_dockedThumbnails" 
		url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_left_bg.png" 
		visible="false" 
			align="left" 
	/>
	<layer name="scrollNextArrowBg_controlBar_dockedThumbnails" 
		style="scrollButtonsBgStyle_controlBar_dockedThumbnails" 
		url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_right_bg.png" 
		visible="false" 
			align="right" 
	/>
	
	<krpano arrow1Loaded_controlBar_dockedThumbnails="false" arrow2Loaded_controlBar_dockedThumbnails="false" borderLoaded_controlBar_dockedThumbnails="false" thumbnailsLoadedCounter_controlBar_dockedThumbnails="0" thumbsCount_controlBar_dockedThumbnails="0" thumbsCounter_controlBar_dockedThumbnails="0" firstInit_controlBar_dockedThumbnails="false" />
	
	
	<events name="thumbnailsScrollEvents_controlBar_dockedThumbnails" 
		keep="true" 
		
		onxmlcomplete="ifnot(startResize_controlBar_dockedThumbnails,set(isLoaded_controlBar_dockedThumbnails, true);if(isStarted_controlBar_dockedThumbnails,onLoadCompleteHandler_controlBar_dockedThumbnails();););"
		onTourStart="set(isStarted_controlBar_dockedThumbnails, true);if(isLoaded_controlBar_dockedThumbnails,onLoadCompleteHandler_controlBar_dockedThumbnails(););"
		onnewpano="if(startResize_controlBar_dockedThumbnails,if(firstInit_controlBar_dockedThumbnails,onLoadCompleteHandler_controlBar_dockedThumbnails();););"
		onresize="onResizeHandler_controlBar_dockedThumbnails();"
		onenterfullscreen="delayedcall(0.2,scrollToCurrentThumb_controlBar_dockedThumbnails(););"
		onexitfullscreen="delayedcall(0.2,scrollToCurrentThumb_controlBar_dockedThumbnails(););"
	/>
	
	
	<layer name="scrollAreaContainer_controlBar_dockedThumbnails" 
		keep="true"
		type="container" 
		align="topleft"
		x="10"
		y="5"
		
		marginX="10"
		marginY="5"
		
		width="0" 
		height="0"
		
		targetWidth="0"
		targetHeight="0"
		
		scrollSpeedInit="10"
		scrollSpeed="10"
		scrollSpeedMax="70"
		scrollSpeedAcceleration="20"
		
		parent="thumbnailsBar_controlBar_dockedThumbnails"
		
		thumbWidth="0"
		thumbHeight="0"
		
		itemWidth="90"
		itemHeight="40"
		
		offsetX="0"
		offsetY="0"
		
		thumbSpacer="10"
		currentThumbsCount="0"
		
		adjustToContent="0"
		
		zorder="1"
		visible="false"
		ready="false"
	>
	
		
		<layer name="thumbsScrollArea_controlBar_dockedThumbnails" 
			url="%FIRSTXML%/graphics/scrollarea.swf" 
			alturl="%FIRSTXML%/graphics/scrollarea.js" 
			align="bottomleft"
			onhover_autoscrolling="false"
			
			x="0"
			y="0"
			 
				direction="h" 
		/>
	
	</layer>
	
	
	
	<layer name="scrollPrevArrow_controlBar_dockedThumbnails" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar_controlBar_dockedThumbnails"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages_controlBar_dockedThumbnails(arrow1);"
			url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_left.png"
			align="left"
	/>
	
	
	
	<layer name="scrollNextArrow_controlBar_dockedThumbnails" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar_controlBar_dockedThumbnails"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages_controlBar_dockedThumbnails(arrow2);"
			url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_right.png"
			align="right"
	/>
	
	<action name="loadedImages_controlBar_dockedThumbnails">
		if(%1 == "arrow1",
			set(arrow1Loaded_controlBar_dockedThumbnails, true);
		);
		if(%1 == "arrow2",
			set(arrow2Loaded_controlBar_dockedThumbnails, true);
		);
		if(%1 == "border",
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				set(borderLoaded_controlBar_dockedThumbnails, true);
			);
		);
		if(%1 == "thumbnail",
			inc(thumbnailsLoadedCounter_controlBar_dockedThumbnails);
		);
	</action>
	
	<action name="onLoadCompleteHandler_controlBar_dockedThumbnails">
		
		set(thumbsCount_controlBar_dockedThumbnails, 0);
		
		
		set(thumbsCount_controlBar_dockedThumbnails, get(scene.count));
		
		
		
		
		
		
		
		loadThumbs_controlBar_dockedThumbnails();
		
		if(firstInit_controlBar_dockedThumbnails,
			onLoadCompleteHandlerPartThree_controlBar_dockedThumbnails();
		,
			onLoadCompleteHandlerPartTwo_controlBar_dockedThumbnails();
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartTwo_controlBar_dockedThumbnails">
		set(imgCounter_controlBar_dockedThumbnails, 3);
		
		if(arrow1Loaded_controlBar_dockedThumbnails,
			dec(imgCounter_controlBar_dockedThumbnails);
		);
		if(arrow2Loaded_controlBar_dockedThumbnails,
			dec(imgCounter_controlBar_dockedThumbnails);
		);
		if(thumbsCount_controlBar_dockedThumbnails == thumbnailsLoadedCounter_controlBar_dockedThumbnails,
			dec(imgCounter_controlBar_dockedThumbnails);
		);
		
		if(imgCounter_controlBar_dockedThumbnails LE 0,
			stopdelayedcall(delayedCallOnLoadComplete_controlBar_dockedThumbnails);
			onLoadCompleteHandlerPartThree_controlBar_dockedThumbnails();
		,
			delayedcall(delayedCallOnLoadComplete_controlBar_dockedThumbnails, 0.2, onLoadCompleteHandlerPartTwo_controlBar_dockedThumbnails());
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartThree_controlBar_dockedThumbnails">
		resetMouseBehavior_controlBar_dockedThumbnails();
		highlightCurrentThumb_controlBar_dockedThumbnails();
		
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
			mul(adjustWidth_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX), 2);
			add(adjustWidth_controlBar_dockedThumbnails, get(layer[thumbsScrollArea_controlBar_dockedThumbnails].width));
			mul(adjustHeight_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginY), 2);
			add(adjustHeight_controlBar_dockedThumbnails, get(layer[thumbsScrollArea_controlBar_dockedThumbnails].height));
			
			
			if(adjustWidth_controlBar_dockedThumbnails GT stagewidth,
				set(adjustWidth_controlBar_dockedThumbnails, get(stagewidth));
				set(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent, false);
			,
				if(adjustHeight_controlBar_dockedThumbnails GT stageheight,
					set(adjustHeight_controlBar_dockedThumbnails, get(stageheight));
					set(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent, false);
				);
			);
			
			setSize_controlBar_dockedThumbnails(get(adjustWidth_controlBar_dockedThumbnails), get(adjustHeight_controlBar_dockedThumbnails));
		);
		
			initArrows_controlBar_dockedThumbnails();
		setupArrows_controlBar_dockedThumbnails(true);
		
		
		if (thumbsCounter_controlBar_dockedThumbnails LE 0,
			set(layer[thumbnailsBar_controlBar_dockedThumbnails].visible, false);
		);
		
		
		set(startResize_controlBar_dockedThumbnails, true);
		set(firstInit_controlBar_dockedThumbnails, true);
	</action>
	
	
	<action name="onResizeHandler_controlBar_dockedThumbnails">
		
		delayedcall(0.1, onResizeCallback_controlBar_dockedThumbnails(false); );
	</action>
	
	
	<action name="onResizeCallback_controlBar_dockedThumbnails">
		if(startResize_controlBar_dockedThumbnails,
			setSize_controlBar_dockedThumbnails(get(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetWidth), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetHeight));
			setupArrows_controlBar_dockedThumbnails(%1);
			
			
			if (thumbsCounter_controlBar_dockedThumbnails LE 0,
				set(layer[thumbnailsBar_controlBar_dockedThumbnails].visible, false);
			);
		);
	</action>
	
	
	
	
	
	
	<action name="thumbnailBorderDrawInit_controlBar_dockedThumbnails">
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth));
		
		
		mul(totalOffsetX_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth), 2);
		mul(totalOffsetY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth), 2);
		
		
		if(startResize_controlBar_dockedThumbnails,
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
		);
		
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbWidth, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbHeight, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
		
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
	</action>
		
	
	<action name="thumbnailBorderImageInit_controlBar_dockedThumbnails">
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetX));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY));
		
		
		mul(totalOffsetX_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetX), 2);
		mul(totalOffsetY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY), 2);
		
		
		if(startResize_controlBar_dockedThumbnails,
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
		);
		
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbWidth, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbHeight, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
		
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
		
		
		div(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].height), 4);
		
		
		set(cropX_controlBar_dockedThumbnails, 0);
		set(cropY_controlBar_dockedThumbnails, 0);
		set(cropW_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].width));
		set(cropH_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropDefault, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));

		
		add(cropY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropHover, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));
		
		
		add(cropY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));
		
		
		add(cropY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropVisited, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));
		
		
		set(scaleX_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetX));
		set(scaleY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY));
		sub(scaleW_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].width), get(totalOffsetX_controlBar_dockedThumbnails));
		sub(scaleH_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight), get(totalOffsetY_controlBar_dockedThumbnails));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].scale9grid, get(scaleX_controlBar_dockedThumbnails), '|', get(scaleY_controlBar_dockedThumbnails), '|', get(scaleW_controlBar_dockedThumbnails), '|', get(scaleH_controlBar_dockedThumbnails));
	</action>
	
	
	<action name="loadThumbs_controlBar_dockedThumbnails">
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(imgCounter_controlBar_dockedThumbnails, 1);
		,
			set(imgCounter_controlBar_dockedThumbnails, 0);
		);
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			if(borderLoaded_controlBar_dockedThumbnails,
				dec(imgCounter_controlBar_dockedThumbnails);
			);
		);
		
		if(imgCounter_controlBar_dockedThumbnails LE 0,
			stopdelayedcall(delayedCallOnLoadCompleteBorder_controlBar_dockedThumbnails);
			loadThumbsPartTwo_controlBar_dockedThumbnails();
		,
			delayedcall(delayedCallOnLoadCompleteBorder_controlBar_dockedThumbnails, 0.2, loadThumbs_controlBar_dockedThumbnails());
		);
	</action>
	
	<action name="loadThumbsPartTwo_controlBar_dockedThumbnails">
		ifnot(layer[scrollAreaContainer_controlBar_dockedThumbnails].ready,
			
			
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				thumbnailBorderImageInit_controlBar_dockedThumbnails();
			,
				thumbnailBorderDrawInit_controlBar_dockedThumbnails();
			);
			
			
			set(thumbsCounter_controlBar_dockedThumbnails, 0);
			
			
				for( set(i_controlBar_dockedThumbnails, 0), i_controlBar_dockedThumbnails LT scene.count, inc(i_controlBar_dockedThumbnails),
					createThumb_controlBar_dockedThumbnails(get(scene[get(i_controlBar_dockedThumbnails)].name), get(scene[get(i_controlBar_dockedThumbnails)].thumburl), get(i_controlBar_dockedThumbnails), get(scene[get(i_controlBar_dockedThumbnails)].titleid));
					inc(thumbsCounter_controlBar_dockedThumbnails);
				);
			
			
			
			
			
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].currentThumbsCount, get(thumbsCounter_controlBar_dockedThumbnails));
			
			
			setSize_controlBar_dockedThumbnails(get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].width), get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].height));
			
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].visible, true);
			
			
					set(layer[thumbnailsBar_controlBar_dockedThumbnails].visible, true);
			
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].ready, true);
		);
	</action>
	
	
	<action name="setSize_controlBar_dockedThumbnails">
		
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetWidth, %1);
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetHeight, %2);
		
		
		set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].width, %1);
		set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].height, %2);
		layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].updatepos();
		
		
		mul(totalMarginX_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX), 2);
		mul(totalMarginY_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginY), 2);
		
			add(totalPluginHeight_controlBar_dockedThumbnails, get(totalMarginY_controlBar_dockedThumbnails), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
			
			
			
			if(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelheight LT totalPluginHeight_controlBar_dockedThumbnails,
				set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].height, get(totalPluginHeight_controlBar_dockedThumbnails));
			);
		
		layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].updatepos();
		
		
		sub(containerWidth_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelwidth), get(totalMarginX_controlBar_dockedThumbnails));
		sub(containerHeight_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelheight), get(totalMarginY_controlBar_dockedThumbnails));

		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].width, get(containerWidth_controlBar_dockedThumbnails));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].height, get(containerHeight_controlBar_dockedThumbnails));
		
		set(scrollAreaSize_controlBar_dockedThumbnails, 0);
		
		
		mul(totalThumbsSpacer_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].currentThumbsCount), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbSpacer));
		sub(totalThumbsSpacer_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbSpacer));
		
		set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, true);
		

			mul(scrollAreaSize_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].currentThumbsCount));
			add(scrollAreaSize_controlBar_dockedThumbnails, get(totalThumbsSpacer_controlBar_dockedThumbnails));
			
			set(layer[thumbsScrollArea_controlBar_dockedThumbnails].width, get(scrollAreaSize_controlBar_dockedThumbnails));
			set(layer[thumbsScrollArea_controlBar_dockedThumbnails].height, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
			
			
			if(layer[scrollAreaContainer_controlBar_dockedThumbnails].width LT layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth,
				set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, false);
			,
				verifyThumbnailsBarVisibility_controlBar_dockedThumbnails();
			);
			
		
		
		if(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].width LT 0,
			set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, false);
		);
		
	</action>
	
	
	<action name="verifyThumbnailsBarVisibility_controlBar_dockedThumbnails">
		if(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible,
			set(boolValue_controlBar_dockedThumbnails, false);
			
					set(boolValue_controlBar_dockedThumbnails, true);
			
			set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, get(boolValue_controlBar_dockedThumbnails));
		);
	</action>
	
	
	<action name="createThumb_controlBar_dockedThumbnails">

			add(offsetFactor_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbSpacer));
	
			mul(thumbIncPos_controlBar_dockedThumbnails, %3, get(offsetFactor_controlBar_dockedThumbnails));
			
			
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				add(thumbIncPos_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX));
			);
			
		
		mul(negativeOffsetX_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX), -1);
		mul(negativeOffsetY_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY), -1);
		
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		addlayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		addlayer(get(thumbBorderName));
		
		
		ifnot(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].type, container);
			set(layer[get(thumbBorderName)].parent, thumbsScrollArea_controlBar_dockedThumbnails);
		);
		
		
		set(layer[get(thumbName)].onloaded, loadedImages_controlBar_dockedThumbnails("thumbnail"););
		set(layer[get(thumbName)].url, %2);
		set(layer[get(thumbName)].keep, true);
		set(layer[get(thumbName)].width, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbWidth));
		set(layer[get(thumbName)].height, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbHeight));
		set(layer[get(thumbName)].align, topleft);
		
		
			set(layer[get(thumbName)].y, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY));
		
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				set(layer[get(thumbName)].parent, thumbsScrollArea_controlBar_dockedThumbnails);
				set(layer[get(thumbName)].x, get(thumbIncPos_controlBar_dockedThumbnails));
			,
				set(layer[get(thumbName)].parent, get(thumbBorderName));
				set(layer[get(thumbName)].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX));
				set(layer[get(thumbName)].onclick, resetMouseBehavior_controlBar_dockedThumbnails(); mainloadscene(%1); delayedcall(0.1,highlightThumb_controlBar_dockedThumbnails(%1)));
			);	
			
		
		
		set(layer[get(thumbBorderName)].keep, true);
		set(layer[get(thumbBorderName)].width, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth));
		set(layer[get(thumbBorderName)].height, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
		set(layer[get(thumbBorderName)].align, topleft);
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].url, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url));
			set(layer[get(thumbBorderName)].scale9grid, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].scale9grid));
			set(layer[get(thumbBorderName)].parent, get(thumbName));
			set(layer[get(thumbBorderName)].x, get(negativeOffsetX_controlBar_dockedThumbnails));
			set(layer[get(thumbBorderName)].y, get(negativeOffsetY_controlBar_dockedThumbnails));
			set(layer[get(thumbBorderName)].onclick, resetMouseBehavior_controlBar_dockedThumbnails(); mainloadscene(%1); delayedcall(0.1,highlightThumb_controlBar_dockedThumbnails(%1)));
		,
			
				set(layer[get(thumbBorderName)].x, get(thumbIncPos_controlBar_dockedThumbnails)); 
				
		);
		
		
		setupMouseBehavior_controlBar_dockedThumbnails(%1, %4);
		
	</action>
	
	
	<action name="removeThumb_controlBar_dockedThumbnails">
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		removelayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		removelayer(get(thumbBorderName));
	</action>
	
	
	<action name="initArrows_controlBar_dockedThumbnails">
		ifnot(device.touchdevice,
			
			if(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetHeight LE 0,
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetHeight, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].height));
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetWidth, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width));
			);
			if(layer[scrollNextArrow_controlBar_dockedThumbnails].targetHeight LE 0,
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].targetHeight, get(layer[scrollNextArrow_controlBar_dockedThumbnails].height));
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].targetWidth, get(layer[scrollNextArrow_controlBar_dockedThumbnails].width));
			);
			
			
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].width, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetWidth));
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].width, get(layer[scrollNextArrow_controlBar_dockedThumbnails].targetWidth));
			
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].width, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetWidth));
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].width, get(layer[scrollNextArrow_controlBar_dockedThumbnails].targetWidth));
			
			div(btPrevQuarterHeight_controlBar_dockedThumbnails, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetHeight), 3);
			div(btNextQuarterHeight_controlBar_dockedThumbnails, get(layer[scrollNextArrow_controlBar_dockedThumbnails].targetHeight), 3);
			
			set(cropBtPrevX_controlBar_dockedThumbnails, 0);
			set(cropBtPrevY_controlBar_dockedThumbnails, 0);
			set(cropBtPrevW_controlBar_dockedThumbnails, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width));
			set(cropBtPrevH_controlBar_dockedThumbnails, get(btPrevQuarterHeight_controlBar_dockedThumbnails));
			
			txtadd(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault, get(cropBtPrevX_controlBar_dockedThumbnails), '|', get(cropBtPrevY_controlBar_dockedThumbnails), '|', get(cropBtPrevW_controlBar_dockedThumbnails), '|', get(cropBtPrevH_controlBar_dockedThumbnails));
			add(cropBtPrevY_controlBar_dockedThumbnails, get(btPrevQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropOver, get(cropBtPrevX_controlBar_dockedThumbnails), '|', get(cropBtPrevY_controlBar_dockedThumbnails), '|', get(cropBtPrevW_controlBar_dockedThumbnails), '|', get(cropBtPrevH_controlBar_dockedThumbnails));
			add(cropBtPrevY_controlBar_dockedThumbnails, get(btPrevQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDown, get(cropBtPrevX_controlBar_dockedThumbnails), '|', get(cropBtPrevY_controlBar_dockedThumbnails), '|', get(cropBtPrevW_controlBar_dockedThumbnails), '|', get(cropBtPrevH_controlBar_dockedThumbnails));
			
			set(cropBtNextX_controlBar_dockedThumbnails, 0);
			set(cropBtNextY_controlBar_dockedThumbnails, 0);
			set(cropBtNextW_controlBar_dockedThumbnails, get(layer[scrollNextArrow_controlBar_dockedThumbnails].width));
			set(cropBtNextH_controlBar_dockedThumbnails, get(btNextQuarterHeight_controlBar_dockedThumbnails));
			
			txtadd(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault, get(cropBtNextX_controlBar_dockedThumbnails), '|', get(cropBtNextY_controlBar_dockedThumbnails), '|', get(cropBtNextW_controlBar_dockedThumbnails), '|', get(cropBtNextH_controlBar_dockedThumbnails));
			add(cropBtNextY_controlBar_dockedThumbnails, get(btNextQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollNextArrow_controlBar_dockedThumbnails].cropOver, get(cropBtNextX_controlBar_dockedThumbnails), '|', get(cropBtNextY_controlBar_dockedThumbnails), '|', get(cropBtNextW_controlBar_dockedThumbnails), '|', get(cropBtNextH_controlBar_dockedThumbnails));
			add(cropBtNextY_controlBar_dockedThumbnails, get(btNextQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDown, get(cropBtNextX_controlBar_dockedThumbnails), '|', get(cropBtNextY_controlBar_dockedThumbnails), '|', get(cropBtNextW_controlBar_dockedThumbnails), '|', get(cropBtNextH_controlBar_dockedThumbnails));
		);
	</action>
	
	<action name="setupArrows_controlBar_dockedThumbnails">
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
			hideArrows_controlBar_dockedThumbnails();
		,
			ifnot(device.touchdevice,
				
					if(layer[scrollAreaContainer_controlBar_dockedThumbnails].width LT layer[thumbsScrollArea_controlBar_dockedThumbnails].width,
				
					showArrows_controlBar_dockedThumbnails();
				,
					hideArrows_controlBar_dockedThumbnails();
				);
			,
				hideArrows_controlBar_dockedThumbnails();
			);
		);
		
		
		if(%1,
			scrollToCurrentThumb_controlBar_dockedThumbnails();
		);
		
		
			
			if(layer[scrollAreaContainer_controlBar_dockedThumbnails].width LT layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth,
				set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, false);
			);
	</action>
	
	
	<action name="showArrows_controlBar_dockedThumbnails">
		
		
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault));
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onovercrop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropOver));
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].ondowncrop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDown));
			
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault));
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].onovercrop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropOver));
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].ondowncrop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDown));
			
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].height, 36);
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].width, 36);
				
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].height, 36);
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].width, 36);
			
					set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].height, 36);
					set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].width, 36);
					
					set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].height, 36);
					set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].width, 36);
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault));
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault));
			
		
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].visible, true);
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].visible, true);
		
			set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].visible, true);
			set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].visible, true);
		
		
			
			add(totalArrowSize_controlBar_dockedThumbnails, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width), get(layer[scrollNextArrow_controlBar_dockedThumbnails].width));
		
			
			sub(scrollAreaContainerSize_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelwidth), get(totalArrowSize_controlBar_dockedThumbnails));
		
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].width, get(scrollAreaContainerSize_controlBar_dockedThumbnails));
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].x, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width));
			
		
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onhover, scrollPrev_controlBar_dockedThumbnails();changeArrowsBgCrop_controlBar_dockedThumbnails('prev','over'););
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].onhover, scrollNext_controlBar_dockedThumbnails();changeArrowsBgCrop_controlBar_dockedThumbnails('next','over'););
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onclick, scrollPrev_controlBar_dockedThumbnails(get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedAcceleration)););
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].onclick, scrollNext_controlBar_dockedThumbnails(get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedAcceleration)););
		
		
		
		
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onout, set(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedInit));changeArrowsBgCrop_controlBar_dockedThumbnails('prev','out'););
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].onout, set(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedInit));changeArrowsBgCrop_controlBar_dockedThumbnails('next','out'););
		
	</action>
	
	
	<action name="changeArrowsBgCrop_controlBar_dockedThumbnails">
		if(%1 == "prev",
			if(%2 == "over",
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropOver));
			,
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault));
			);
		,
			if(%2 == "over",
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropOver));
			,
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault));
			);
		);
	</action>
	
	
	<action name="hideArrows_controlBar_dockedThumbnails">
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].visible, false);
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].visible, false);
		
			set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].visible, false);
			set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].visible, false);
		

			mul(totalMargin_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX), 2);
			
			sub(scrollAreaContainerSize_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelwidth), get(totalMargin_controlBar_dockedThumbnails));

			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].width, get(scrollAreaContainerSize_controlBar_dockedThumbnails));
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX));
			 
			
	</action>
	
	
	<action name="scrollPrev_controlBar_dockedThumbnails">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_controlBar_dockedThumbnails].stopscrolling();
		
		set(scrollLimit_controlBar_dockedThumbnails, 0);
		
		
			
			
			add(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed));
			if(layer[thumbsScrollArea_controlBar_dockedThumbnails].x GE scrollLimit_controlBar_dockedThumbnails,
				set(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(scrollLimit_controlBar_dockedThumbnails));
			);
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed LT layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedMax,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed);
		);
		
	</action>
	
	
	<action name="scrollNext_controlBar_dockedThumbnails">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_controlBar_dockedThumbnails].stopscrolling();
		
			
			sub(scrollLimit_controlBar_dockedThumbnails, get(layer[thumbsScrollArea_controlBar_dockedThumbnails].width), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].width));
			
			mul(scrollLimit_controlBar_dockedThumbnails, -1);
			
			sub(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed));
			if(layer[thumbsScrollArea_controlBar_dockedThumbnails].x LE scrollLimit_controlBar_dockedThumbnails,
				set(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(scrollLimit_controlBar_dockedThumbnails));
			);
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed LT layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedMax,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed);
		);
		
	</action>
	
	
	<action name="resetMouseBehavior_controlBar_dockedThumbnails">
	
		
		
			for( set(j_controlBar_dockedThumbnails, 0), j_controlBar_dockedThumbnails LT scene.count, inc(j_controlBar_dockedThumbnails),
				set(thumbBorderName, 'thumbBorder_');
				txtadd(thumbBorderName, get(scene[get(j_controlBar_dockedThumbnails)].name));
				txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
				
				setupMouseBehavior_controlBar_dockedThumbnails(get(scene[get(j_controlBar_dockedThumbnails)].name), get(scene[get(j_controlBar_dockedThumbnails)].titleid));
			);
		
	</action>
	
	
	<action name="setupMouseBehavior_controlBar_dockedThumbnails">

		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropDefault));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropHover));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropHover));
			set(layer[get(thumbBorderName)].tooltip, %2);
				set(layer[get(thumbBorderName)].onhover, showTooltip('plugin', controlBar_dockedThumbnailsmenuTooltipStyle));
				set(layer[get(thumbBorderName)].onout, hideTooltip());
		,
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorDefault));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaDefault));
				set(layer[get(thumbName)].tooltip, %2);
				set(layer[get(thumbName)].onhover, showTooltip('plugin', controlBar_dockedThumbnailsmenuTooltipStyle));
			
			set(layer[get(thumbName)].onover, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorHover));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaHover));
			);
			
			set(layer[get(thumbName)].onout, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorDefault));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaDefault));
				hideTooltip();
			);
		);
	
	</action>
	
	
	<action name="highlightCurrentThumb_controlBar_dockedThumbnails">
			delayedcall(0.1,highlightThumb_controlBar_dockedThumbnails(get(xml.scene)));
	</action>
	
	
	<action name="highlightThumb_controlBar_dockedThumbnails">
	
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected));
		,
			set(thumbName, 'thumb_');
			txtadd(thumbName, %1);
			txtadd(thumbName, '_controlBar_dockedThumbnails');
			
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorSelected));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaSelected));
			
			set(layer[get(thumbName)].onover, "");
			set(layer[get(thumbName)].onout, hideTooltip(););
		);

		scrollToThumb_controlBar_dockedThumbnails(%1);
	</action>
	
	
	<action name="scrollToCurrentThumb_controlBar_dockedThumbnails">
			scrollToThumb_controlBar_dockedThumbnails(get(xml.scene));
	</action>
	
	
	<action name="scrollToThumb_controlBar_dockedThumbnails">
		
		set(thumbName, 'thumb_');
		set(thumbBorderName, 'thumbBorder_');
		
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');

			set(posX_controlBar_dockedThumbnails, 0);
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				div(halfThumbWidth_controlBar_dockedThumbnails, get(layer[get(thumbName)].width), 2);
				ifnot(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
					add(posX_controlBar_dockedThumbnails, get(layer[get(thumbName)].x), get(halfThumbWidth_controlBar_dockedThumbnails));
				);
				if(layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter,
					layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter(get(posX_controlBar_dockedThumbnails), 0);
				);
			,
				div(halfThumbWidth_controlBar_dockedThumbnails, get(layer[get(thumbBorderName)].width), 2);
				ifnot(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
					add(posX_controlBar_dockedThumbnails, get(layer[get(thumbBorderName)].x), get(halfThumbWidth_controlBar_dockedThumbnails));
				);
				if(layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter,
					layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter(get(posX_controlBar_dockedThumbnails), 0);
				);
			);
		
	</action>
	


<action name="resetThumbnailsBarSize_controlBar_dockedThumbnails">
	
	
	set(sizeHeight, 40);
	mul(totalMarginY, 5, 2);
	if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
		mul(totalOffsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY), 2);
	,
		mul(totalOffsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth), 2);
	);
	add(sizeHeight, totalMarginY);
	add(sizeHeight, totalOffsetY);
	
	setSize_controlBar_dockedThumbnails(%1, sizeHeight);
</action>





<action name="controlBar_dockedThumbnailsbuildMenu">
	
    set(controlBar_dockedThumbnailsbutton_pos, 0);
    set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].x, get(controlBar_dockedThumbnailsbutton_pos));
    set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
    inc(controlBar_dockedThumbnailsbutton_pos, 36);


      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_display_help].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_display_help_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_close_help].x  , get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_close_help_bg].x  , get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );

      if (device.fullscreensupport,
        set(layer[controlBar_dockedThumbnailsbtn_openfs].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_closefs].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_openfs_bg ].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );


      set(layer[controlBar_dockedThumbnailsbtn_share].x   , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_share_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);


      set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);



      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );


      if(plugin[ptpvrmode] AND device.html5,
        set(layer[controlBar_dockedThumbnailsbtn_enter_vr].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_enter_vr_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_enter_vr_not].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_enter_vr_bg_not].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );



      set(layer[controlBar_dockedThumbnailsbtn_home].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_home_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_right].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_right_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_left].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_left_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_down].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_down_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_up].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_up_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_out].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_out_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
        set(layer[controlBar_dockedThumbnailsbtn_in].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_in_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );


      if (scene.count GT 1,
        set(layer[controlBar_dockedThumbnailsbtn_next_pano].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_next_pano_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_prev_pano].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_prev_pano_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );



      set(controlBar_dockedThumbnailsThumbnailsPos, get(controlBar_dockedThumbnailsbutton_pos));
      controlBar_dockedThumbnailsUpdateThumbnailsSize();
	
	
	
</action>

<events name="controlBar_dockedThumbnailsStartTourEvents" onTourStart="controlBar_dockedThumbnailsCallOnStartTour();" keep="true" />

<action name="controlBar_dockedThumbnailsCallOnStartTour">
	
	controlBar_dockedThumbnailsshowMenuControls();
</action>



	<action name="controlBar_dockedThumbnailsOnResize">
		controlBar_dockedThumbnailsUpdateThumbnailsSize();
	</action>
	<action name="controlBar_dockedThumbnailsUpdateThumbnailsSize">
		copy(newThumbnailsBarWidth, stagewidth);
		sub(newThumbnailsBarWidth, controlBar_dockedThumbnailsThumbnailsPos);
		
		resetThumbnailsBarSize_controlBar_dockedThumbnails(get(newThumbnailsBarWidth));
	</action>

    <layer name="controlBar_dockedThumbnails_bg"
           keep="true"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/footer.png"
           zorder="4"
           width="100%"
           align="bottomleft"
           x="0"
           visible="false" />

    <style name="controlBar_dockedThumbnails_btn_style_bg"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            crop="0|0|48|48"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
            align="bottomright"
            height="36"
            width="36"
            alpha="0.3"
            y="12"
            zorder="0"
            />
    <style name="controlBar_dockedThumbnails_btn_style_bg_off"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            crop="0|0|48|48"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
            align="bottomright"
            height="36"
            width="36"
            alpha="0.3"
            y="12"
            zorder="0"
            />

    <style name="controlBar_dockedThumbnails_btn_style_on_bg"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           crop="0|48|48|48"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
           align="bottomright"
           height="36"
           width="36"
           alpha="0.3"
           y="12"
           zorder="0"
           />
    <style name="controlBar_dockedThumbnails_btn_style_on_bg_off"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           crop="0|0|48|48"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
           align="bottomright"
           height="36"
           width="36"
           alpha="0.3"
           y="12"
           zorder="0"
           />

    <style name="controlBar_dockedThumbnails_btn_down_style"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onover="controlBar_dockedThumbnailsctrl_btn_onoveraction"
           onout="controlBar_dockedThumbnailsctrl_btn_onoutaction"
           />

    <style name="controlBar_dockedThumbnails_btn_style"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onover="controlBar_dockedThumbnailsctrl_btn_onoveraction"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction"
           onout="controlBar_dockedThumbnailsctrl_btn_onoutaction"
           />
    <style name="controlBar_dockedThumbnails_btn_style_off"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onout="hideTooltip();"
           />

  <action name="controlBar_dockedThumbnailsctrl_btn_onoveraction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|48|48|48");
  </action>

  <action name="controlBar_dockedThumbnailsctrl_btn_ondownaction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|96|48|48");
  </action>

  <action name="controlBar_dockedThumbnailsctrl_btn_onoutaction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|0|48|48");
    hideTooltip();
  </action>

    <style name="controlBar_dockedThumbnails_btn_style_on"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
                  crop="0|48|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            align="bottomright"
            height="36"
            width="36"
            y="12"
            zorder="1"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);" 
            onout="hideTooltip();"
            />
    <style name="controlBar_dockedThumbnails_btn_style_on_off"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            align="bottomright"
            height="36"
            width="36"
            y="12"
            zorder="1"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);" 
            onout="hideTooltip();"
            />



	<events name="controlBar_dockedThumbnailscontrolmodechangedevent" oncontrolmodechanged="controlBar_dockedThumbnailsupdateControlModeButtons();" keep="true"/>
	<action name="controlBar_dockedThumbnailsHideControlModeButtons">
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].visible, false);
		,
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateControlModeButtons">
	if (device.desktop,
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowControlModeButtons();
		,
			controlBar_dockedThumbnailsHideControlModeButtons();
		);
	,
		controlBar_dockedThumbnailsHideControlModeButtons();
	);
	</action>
	
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop" />
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_move_to"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_to.png"
           style="controlBar_dockedThumbnails_btn_style"
           tooltip="controlBar_dockedThumbnailsctrlmodeMoveTip"
           onclick="setControlModeMoveTo();
"
           visible="false"
           devices="desktop"
           />
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop" />
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_drag_to"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_drag_to.png"
           style="controlBar_dockedThumbnails_btn_style"
           tooltip="controlBar_dockedThumbnailsctrlmodeDragTip"
           onclick="setControlModeDragTo();
"
           visible="false"
           devices="desktop"
           />

    <layer name="controlBar_dockedThumbnailsbtn_in_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop"/>
    <layer name="controlBar_dockedThumbnailsbtn_in"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_in.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlZoomIn(false);"
           onup="viewControlZoomStop();
"
           tooltip="controlBar_dockedThumbnailszoomInTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_out_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop"/>
    <layer name="controlBar_dockedThumbnailsbtn_out"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_out.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlZoomOut(false);
"
           onup="viewControlZoomStop();
"
           tooltip="controlBar_dockedThumbnailszoomOutTip"
           devices="desktop"
           visible="false"
           />

    <layer name="controlBar_dockedThumbnailsbtn_home_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_home"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_home.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           onclick="controlBar_dockedThumbnailsbtn_home_action();"
           visible="false"
           tooltip="controlBar_dockedThumbnailshomeTip"
           />
    <action name="controlBar_dockedThumbnailsbtn_home_action">
      hideTooltip();lookto(get(panoview.h),get(panoview.v),get(panoview.fov),smooth(100,20,50));
      if(scene[get(xml.scene)].video,
        plugin[get(videointerface_video)].seek(0);
        ifnot(plugin[get(videointerface_video)].ispaused,
          plugin[get(videointerface_video)].play();
        );
      );
    </action>

    <layer name="controlBar_dockedThumbnailsbtn_left_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_left"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_left.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveLeft(false);
"
           onup="viewControlMoveHoriStop();
"
            tooltip="controlBar_dockedThumbnailsmoveLeftTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_right_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_right"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_right.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveRight(false);
"
           onup="viewControlMoveHoriStop();
"
            tooltip="controlBar_dockedThumbnailsmoveRightTip"
           devices="desktop"
           visible="false"
           />

    <layer name="controlBar_dockedThumbnailsbtn_up_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_up"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_up.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveUp(false);
"
           onup="viewControlMoveVertStop();
"
            tooltip="controlBar_dockedThumbnailsmoveUpTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_down_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_down"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_down.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveDown(false);
"
           onup="viewControlMoveVertStop();
"
            tooltip="controlBar_dockedThumbnailsmoveDownTip"
           devices="desktop"
           visible="false"
           />



<events name="controlBar_dockedThumbnailsvravailableevent"
		onvravailable="controlBar_dockedThumbnailsupdateVrButtonsAvailability();"
		onvrunavailable="controlBar_dockedThumbnailsupdateVrButtonsAvailability();"
		keep="true" devices="html5" />
	<krpano controlBar_dockedThumbnailsmenuvravailable="false" />
	<action name="controlBar_dockedThumbnailsupdateVrButtonsAvailability">
		if (tour_vrdevices,
			set(controlBar_dockedThumbnailsmenuvravailable, true);
		,
			set(controlBar_dockedThumbnailsmenuvravailable, false);
		);
		controlBar_dockedThumbnailsupdateVrButtons();
	</action>
	<action name="controlBar_dockedThumbnailsHideVrButtons">
		set(layer[controlBar_dockedThumbnailsbtn_enter_vr].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_enter_vr_bg].visible, false);
		if('%1' == 'true' AND plugin[ptpvrmode],
			set(layer[controlBar_dockedThumbnailsbtn_enter_vr_not].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_enter_vr_bg_not].visible, true);
		,
			set(layer[controlBar_dockedThumbnailsbtn_enter_vr_not].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_enter_vr_bg_not].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsShowVrButtons">
		if (controlBar_dockedThumbnailsmenuvravailable,
			set(layer[controlBar_dockedThumbnailsbtn_enter_vr].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_enter_vr_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_enter_vr_not].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_enter_vr_bg_not].visible, false);
		,
			controlBar_dockedThumbnailsHideVrButtons(true);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateVrButtons">
	if (tour_vrdevices,
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowVrButtons();
		,
			controlBar_dockedThumbnailsHideVrButtons();
		);
	,
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsHideVrButtons(true);
		,
			controlBar_dockedThumbnailsHideVrButtons();
		);
	);
	</action>

    <layer name="controlBar_dockedThumbnailsbtn_enter_vr_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_enter_vr"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_vr_mode.png"
           onclick="js(accessWebVr());
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
           devices="html5"
           tooltip="controlBar_dockedThumbnailsenterVRTip"
           />
    <layer name="controlBar_dockedThumbnailsbtn_enter_vr_bg_not" style="controlBar_dockedThumbnails_btn_style_bg_off" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_enter_vr_not"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_vr_mode_off.png"
           style="controlBar_dockedThumbnails_btn_style_off"
           tooltip="controlBar_dockedThumbnailsenterVRNotTip"
           enabled="true"
           capture="false"
           visible="false"
           devices="html5"
           />


    <layer name="controlBar_dockedThumbnailsbtn_prev_pano_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_prev_pano"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_previous_scene.png"
           onclick="loadPreviousScene();
"
           style="controlBar_dockedThumbnails_btn_style"
           tooltip="controlBar_dockedThumbnailsprevSceneTip"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_next_pano_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_next_pano"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_next_scene.png"
           onclick="loadNextScene();
"
           style="controlBar_dockedThumbnails_btn_style"
            tooltip="controlBar_dockedThumbnailsnextSceneTip"
           visible="false"
           />




    <layer name="controlBar_dockedThumbnailsbtn_share_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_share"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_share.png"
            onclick="shareTour();
"
            style="controlBar_dockedThumbnails_btn_style"
            visible="false"
            tooltip="controlBar_dockedThumbnailsshareTip"
            />


    <layer name="controlBar_dockedThumbnailsbtn_openfs_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="fullscreensupport" />
    <layer name="controlBar_dockedThumbnailsbtn_openfs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_enter_fs.png"
           onclick="enterFullscreen();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
           tooltip="controlBar_dockedThumbnailsopenFsTip"
           devices="fullscreensupport"
           />
    <layer name="controlBar_dockedThumbnailsbtn_closefs_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" devices="fullscreensupport" />
    <layer name="controlBar_dockedThumbnailsbtn_closefs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_close_fs.png"
           onclick="exitFullscreen();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailscloseFsTip"
           devices="fullscreensupport"
           />

    <layer name="controlBar_dockedThumbnailsbtn_autorotate_on_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_on"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_start_autorotation.png"
           onclick="resumeautorotation();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
            tooltip="controlBar_dockedThumbnailsautorotateOnTip"
           />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_off_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_off"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_stop_autorotation.png"
           onclick="pauseautorotation();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailsautorotateOffTip"
           />



    <layer name="controlBar_dockedThumbnailsbtn_display_help_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop" />
    <layer name="controlBar_dockedThumbnailsbtn_display_help"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_help.png"
           onclick="controlBar_dockedThumbnailsdisplayHelp();"
           style="controlBar_dockedThumbnails_btn_style"
           tooltip="controlBar_dockedThumbnailsdisplayHelpTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_close_help_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" devices="desktop"/>
    <layer name="controlBar_dockedThumbnailsbtn_close_help"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_help.png"
           onclick="controlBar_dockedThumbnailscloseHelp();"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailshideHelpTip"
           devices="desktop"
           />



    <layer name="controlBar_dockedThumbnailsbtn_hidecontrols_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_hidecontrols"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_hide_controls.png"
           style="controlBar_dockedThumbnails_btn_style"
           onclick="controlBar_dockedThumbnailshideMenuControls();hideTourControls();
"
           visible="false"
            tooltip="controlBar_dockedThumbnailshideControlsTip"
           />

    <layer name="controlBar_dockedThumbnailsbtn_showcontrols"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls_bg.png"
            align="bottomright"
            zorder="4"
            height="36"
            width="36"
            visible="false"
            y="12"
            x="0" >
    <layer name="controlBar_dockedThumbnailsbtn_showcontrols_fg"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            onclick="controlBar_dockedThumbnailsshowMenuControls();showTourControls();
"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
            onout="hideTooltip();"
            tooltip="controlBar_dockedThumbnailsdisplayControlsTip"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls.png"
            align="center"
            height="36"
            width="36"
            />
    </layer>


<action name="controlBar_dockedThumbnailshideMenuControls">
	set(controlBar_dockedThumbnailsIsOpened, false);
	set(layer[controlBar_dockedThumbnails_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_showcontrols].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_in_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_out_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_in].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_out].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_home_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_home].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_right_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_left_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_right].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_left].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_down_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_up_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_down].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_up].visible, false);
	if (scene.count GT 1,
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano].visible, false);
	);
		controlBar_dockedThumbnailsupdateAutorotationButtons();

	set(layer[controlBar_dockedThumbnailsbtn_share_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_share].visible, false);
		controlBar_dockedThumbnailsupdateVrButtons();

		controlBar_dockedThumbnailsupdateControlModeButtons();
		controlBar_dockedThumbnailsupdateFullscreenButtons();
		controlBar_dockedThumbnailsupdateHelpButtons();
</action>
<action name="controlBar_dockedThumbnailsshowMenuControls">
	set(controlBar_dockedThumbnailsIsOpened, true);
      controlBar_dockedThumbnailsupdateFullscreenButtons();
      controlBar_dockedThumbnailsupdateAutorotationButtons();

	set(layer[controlBar_dockedThumbnailsbtn_share_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_share].visible, true);
	controlBar_dockedThumbnailsupdateVrButtons();

      controlBar_dockedThumbnailsupdateControlModeButtons();
      controlBar_dockedThumbnailsupdateHelpButtons();
      set(layer[controlBar_dockedThumbnails_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_showcontrols].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_in_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_out_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_in].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_out].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_home_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_home].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_right_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_left_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_right].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_left].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_down_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_up_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_down].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_up].visible, true);
	if (scene.count GT 1,
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano].visible, true);
	);
	
	
		controlBar_dockedThumbnailsUpdateThumbnailsSize();
</action>


    <layer name="controlBar_dockedThumbnailshelpScreenBg" align="center" keep="true" onclick="controlBar_dockedThumbnailscloseHelp();"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/help_screen_bg.png"
           visible="false"
           zorder="97"
           >
      <layer name="controlBar_dockedThumbnailshelpScreen" align="center" keep="true" onclick="controlBar_dockedThumbnailscloseHelp();" 
             url="%FIRSTXML%/graphics/dockedthumbscontrolbar/help_screen_fg.png"
             height="100%" 
             width="prop" 
             displayed="false"
             />
    </layer>
    <action name="controlBar_dockedThumbnailsdisplayHelp">
      if (device.desktop,
        set(layer[controlBar_dockedThumbnailshelpScreen].displayed, true);
        set(layer[controlBar_dockedThumbnailshelpScreenBg].visible,true);
        controlBar_dockedThumbnailsupdateHelpButtons();
      );
    </action>
    <action name="controlBar_dockedThumbnailscloseHelp">
      if (device.desktop,
        set(layer[controlBar_dockedThumbnailshelpScreen].displayed, false);
        set(layer[controlBar_dockedThumbnailshelpScreenBg].visible,false);
        controlBar_dockedThumbnailsupdateHelpButtons();
      );
    </action>
	<action name="controlBar_dockedThumbnailsHideHelpButtons">
		set(layer[controlBar_dockedThumbnailsbtn_display_help].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_close_help].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_display_help_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_close_help_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowHelpButtons">
		if (layer[controlBar_dockedThumbnailshelpScreen].displayed,
			set(layer[controlBar_dockedThumbnailsbtn_close_help].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_display_help].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_close_help_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_display_help_bg].visible, false);
		,
			set(layer[controlBar_dockedThumbnailsbtn_display_help].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_close_help].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_display_help_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_close_help_bg].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateHelpButtons">
	if (device.desktop,
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowHelpButtons();
		,
			controlBar_dockedThumbnailsHideHelpButtons();
		);
	,
		controlBar_dockedThumbnailsHideHelpButtons();
	);
	</action>
    


	<events name="controlBar_dockedThumbnailsmenufullscreenchangeevent"
		onenterfullscreen="controlBar_dockedThumbnailsupdateFullscreenButtons();"
		onexitfullscreen="controlBar_dockedThumbnailsupdateFullscreenButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideFullscreenButtons">
		set(layer[controlBar_dockedThumbnailsbtn_openfs].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_closefs].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_dockedThumbnailsbtn_openfs].visible , false);
				set(layer[controlBar_dockedThumbnailsbtn_closefs].visible, true);
				set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, false);
				set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, true);
			,
				set(layer[controlBar_dockedThumbnailsbtn_openfs].visible ,true);
				set(layer[controlBar_dockedThumbnailsbtn_closefs].visible,false);
				set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, true);
				set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, false);
			);
		,
			controlBar_dockedThumbnailsHideFullscreenButtons();
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateFullscreenButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowFullscreenButtons();
		,
			controlBar_dockedThumbnailsHideFullscreenButtons();
		);
	</action>

	<events name="controlBar_dockedThumbnailsAutorotationEvents"
		onstartautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onresumeautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onstopautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onpauseautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideAutorotationButtons">
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , false);
	</action>
	<action name="controlBar_dockedThumbnailsShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , true);
		,
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateAutorotationButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowAutorotationButtons();
		,
			controlBar_dockedThumbnailsHideAutorotationButtons();
		);
	</action>



	<layer name="controlBar_dockedThumbnailsmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	roundedge="5"
	background="true"
	backgroundcolor="0xd2b530"
	backgroundalpha="0.80000000000000004"
	border="true"
	borderwidth="5.0"
	bordercolor="0xf0f0f0"
	borderalpha="1"
	css="color:#f29320;font-family:Times New Roman;font-weight:bold;font-size:14px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	edge="bottom"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	/>



  <action name="displayWebVideo">
    if(layer[webvideodisplay_bg],

    ,
      <!-- add overlay -->
      addlayer(webvideodisplay_bg);
      set(layer[webvideodisplay_bg].type, container);
      set(layer[webvideodisplay_bg].zorder, 98);
      set(layer[webvideodisplay_bg].align, topleft);
      set(layer[webvideodisplay_bg].width, 100%);
      set(layer[webvideodisplay_bg].height, 100%);
      set(layer[webvideodisplay_bg].bgcolor, %16);
      set(layer[webvideodisplay_bg].bgalpha, %17);
      set(layer[webvideodisplay_bg].bgcapture, true);
      set(layer[webvideodisplay_bg].handcursor, false);
      set(layer[webvideodisplay_bg].alpha, 0.0);
      set(layer[webvideodisplay_bg].onclick, displayWebVideoObjectClose() );
      tween(layer[webvideodisplay_bg].alpha, 1.0, 0.5, default,
        

        addlayer(webvideodisplay_player);
        set(layer[webvideodisplay_player].parent, layer[webvideodisplay_bg]);
        set(layer[webvideodisplay_player].align, %13);
        set(layer[webvideodisplay_player].x, %14);
        set(layer[webvideodisplay_player].y, %15);
        set(layer[webvideodisplay_player].alpha, 0.0);
        set(layer[webvideodisplay_player].pauseautorotate, %18);
        set(layer[webvideodisplay_player].pausebgsound, %19);
        
        sub(maxstagewidth, get(stagewidth), %14);
        sub(maxstageheight, get(stageheight), %15);

        if('4:3' == '%3',
          div(aspect, 4, 3);
        ,
          if('2.39:1' == '%3',
            div(aspect, 2.39, 1);
          ,
            div(aspect, 16, 9);
          );
        );
        if(%9,
          if(%10 == 'pixel',
            set(new_videowidth, %9);
            div(new_videoheight, get(new_videowidth), get(aspect));
          ,
            mul(new_videowidth, get(maxstagewidth), %9);
            div(new_videowidth, 100);
            div(new_videoheight, get(new_videowidth), get(aspect));
          );
        ,
          ifnot(%11,
            set(max_videoheight, %2);
            set(new_videowidth, %1);
            set(new_videoheight, %2);
          );
        );
        if(%11,
          ifnot(%9,
            if(%12 == 'pixel',
              set(new_videoheight, %11);
              mul(new_videowidth, get(new_videoheight), get(aspect));
            ,
              mul(new_videoheight, get(maxstageheight), %11);
              div(new_videoheight, 100);
              mul(new_videowidth, get(new_videoheight), get(aspect));
            );
            set(max_videoheight, get(new_videoheight));
          ,
            if(%12 == 'pixel',
              set(max_videoheight, %11);
            ,
              mul(max_videoheight, get(maxstageheight), %11);
              div(max_videoheight, 100);
            );
          );
        ,
          set(max_videoheight, get(new_videoheight));
        );
        if(new_videowidth GT maxstagewidth,
          set(new_videowidth, get(maxstagewidth));
          div(new_videoheight, get(new_videowidth), get(aspect));
        );
        if(max_videoheight GT maxstageheight,
          set(max_videoheight, get(maxstageheight));
        );
        if(new_videoheight GT max_videoheight,
          set(new_videoheight, get(max_videoheight));
          mul(new_videowidth, get(new_videoheight), get(aspect));
        );
        roundval(new_videowidth);
        roundval(new_videoheight);
        set(layer[webvideodisplay_player].width, get(new_videowidth));
        set(layer[webvideodisplay_player].height, get(new_videoheight));
        
        set(tour_current_played_web_video, %8);
        
        if(device.html5,

          txtadd(iframecode, '[iframe width="',get(layer[webvideodisplay_player].width),'" height="',get(layer[webvideodisplay_player].height),'" src="','%4','%8','?','%6','" frameborder="0" allowfullscreen][/iframe]');
          set(layer[webvideodisplay_player].html, get(iframecode));
          set(layer[webvideodisplay_player].padding, 0);
          set(layer[webvideodisplay_player].url, '%FIRSTXML%/graphics/textfield.swf');
          set(layer[webvideodisplay_player].onloaded, displayWebVideoObjectReady() );
        ,

          txtadd(embedurl, '%5','%8','%7');
          set(layer[webvideodisplay_player].onloaded, registercontentsize(%1,%2);displayWebVideoObjectReady(); );
          set(layer[webvideodisplay_player].url, get(embedurl));
        );
      );
    );
  </action>
  <action name="displayWebVideoObjectReady">
    if(layer[webvideodisplay_player],
      set(layer[webvideodisplay_player].currentCall, true);
      events.dispatch(onremovedisplayedobject);
      tween(layer[webvideodisplay_player].alpha, 1.0, default, default,
        if(layer[webvideodisplay_player].pauseautorotate,pauseautorotation(forcehotspot);
);
      );
    );
  </action>
  <action name="displayWebVideoObjectClose">
    if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].currentCall,
        set(layer[webvideodisplay_player].currentCall, false);
      ,
        set(layer[webvideodisplay_bg].onclick, null);
        delete(tour_current_played_web_video);
        tween(layer[webvideodisplay_player].alpha, 0.0, 0.25, default);
        tween(layer[webvideodisplay_bg].alpha,0.0, 0.50, default,
          if(layer[webvideodisplay_player].pauseautorotate,resumeautorotation(forcehotspot);
);
          removelayer(webvideodisplay_bg);
          removelayer(webvideodisplay_player);
        );
      );
    );
  </action>
  <events name="displayWebVideoObjectEvents" keep="true" onremovedisplayedobject="displayWebVideoObjectClose();"/>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

	<!-- WebVR plugin for VR availability tests -->

	<plugin name="ptpvrmode" devices="html5" keep="true"
		url="%FIRSTXML%/graphics/webvr.js"
		mobilevr_support="true"
		mobilevr_fake_support="false"
		vr_cursor=""
		vr_cursor_enabled="false"
		onavailable="delayedcall(1, checkVrAvailability(););"
		onunavailable="checkVrUnavailable();"
		/>
	<action name="checkVrAvailability">
		if(plugin[ptpvrmode],
			if (plugin[ptpvrmode].isavailable,
				set(tour_vrdevices, true);
				events.dispatch(onvravailable);
			,
				set(tour_vrdevices, false);
			);
		,
			checkVrUnavailable();
		);
	</action>
	<action name="checkVrUnavailable">
		set(tour_vrdevices, false);
		events.dispatch(onvrunavailable);
	</action>
  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <!-- Share Tour -->
  <action name="shareTour">events.dispatch(onsharetour);</action>

  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

<action name="viewControlMoveUp">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(isfullvertical == false AND calc(view.vlookat-%2) LT view.vlookatmin,
				moveto(get(view.hlookat), get(view.vlookatmin));
			,
				moveto(get(view.hlookat), calc(view.vlookat-%2));
			);
		,
			set(vlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveDown">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(sceneisfull360 == false AND calc(view.vlookat+%2) GT view.vlookatmax,
				moveto(get(view.hlookat), get(view.vlookatmax));
			,
				moveto(get(view.hlookat), calc(view.vlookat+%2));
			);
		,
			set(vlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveLeft">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat-%2) LT view.hlookatmin,
				moveto(get(view.hlookatmin), get(view.vlookat));
			,
				moveto(calc(view.hlookat-%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveHoriStop());
		);
	,
		set(hlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveRight">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat+%2) GT view.hlookatmax,
				moveto(get(view.hlookatmax), get(view.vlookat));
			,
				moveto(calc(view.hlookat+%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveHoriStop());
			
		);
	,
		set(hlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveHoriStop">
	set(hlookat_moveforce, 0);
</action>
<action name="viewControlMoveVertStop">
	set(vlookat_moveforce, 0);
</action>

</krpano>
